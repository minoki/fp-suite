name:                fp-ieee
version:             0.1.0.1
github:              "minoki/haskell-floating-point/fp-ieee"
license:             BSD3
author:              "ARATA Mizuki"
maintainer:          "minorinoki@gmail.com"
copyright:           "2020-2021 ARATA Mizuki"
category:            Numeric, Math
synopsis:            IEEE 754-2019 compliant operations

extra-source-files:
- README.md
- ChangeLog.md

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/minoki/haskell-floating-point/tree/master/fp-ieee#readme>

dependencies:
- base >= 4.12 && < 5
# We use a post-GHC 8.6 language extension: NumericUnderscores
# cast{Word32,Word64}To{Float,Double}, cast{Float,Double}To{Word32,Word64} are since base-4.10.0.0 (GHC 8.2)
# Semigroup((<>)) is exported from Prelude since base-4.11.0.0 (GHC 8.4)

flags:
  pure-hs:
    description: "Disable FFI"
    manual: True
    default: false

  sse4_1:
    description: "Use SSE4.1 instructions on x86"
    manual: true
    default: false

  fma3:
    description: "Use FMA3 instructions on x86"
    manual: true
    default: false

  f16c:
    description: "Use F16C instructions on x86"
    manual: true
    default: false

  # x87-long-double:
  #   description: "Support x87 \"long double\" via long-double package"
  #   manual: true
  #   default: true

  float128:
    description: "Support Float128 via float128 package"
    manual: true
    default: false

  half:
    description: "Support Half (float16) via half package"
    manual: true
    default: false

  integer-gmp:
    description: "Use integer-gmp package"
    manual: false
    default: true

  ghc-bignum:
    description: "Use ghc-bignum package"
    manual: false
    default: true

when:
# Always enable SSE2 on i386
- condition: arch(i386)
  ghc-options:
  - -msse2
  cc-options:
  - -msse2 -mfpmath=sse

- condition: "!flag(pure-hs)"
  cpp-options:
  - -DUSE_FFI

# Fast roundeven: needs SSE4.1 on x86
- condition: "!flag(pure-hs) && (arch(i386) || arch(x86_64)) && flag(sse4_1)"
  cpp-options:
  - -DHAS_FAST_ROUNDEVEN
  cc-options:
  - -msse4.1
  c-sources:
  - cbits/roundeven.c

# Fast roundeven: available on AArch64
- condition: "!flag(pure-hs) && arch(aarch64)"
  cpp-options:
  - -DHAS_FAST_ROUNDEVEN
  c-sources:
  - cbits/roundeven.c

# Fast FMA: needs FMA3 on x86 (FMA4 is not supported by this package)
- condition: "!flag(pure-hs) && (arch(i386) || arch(x86_64)) && flag(fma3)"
  cpp-options:
  - -DHAS_FAST_FMA
  cc-options:
  - -mfma
  c-sources:
  - cbits/fma.c

# Fast FMA: available on AArch64
- condition: "!flag(pure-hs) && arch(aarch64)"
  cpp-options:
  - -DHAS_FAST_FMA
  c-sources:
  - cbits/fma.c

# Enable use of libm's fma unless "pure-hs" is set; but not on Windows
# (mingw-w64's fma is not reliable)
- condition: "!flag(pure-hs) && (arch(i386) || arch(x86_64)) && !os(windows)"
  cpp-options:
  - -DUSE_C99_FMA

# Fast min/max: available on AArch64
- condition: "!flag(pure-hs) && arch(aarch64)"
  cpp-options:
  - -DHAS_FAST_MINMAX
  c-sources:
  - cbits/minmax.c

# # flag(x87-long-double): Support LongDouble on x86
# - condition: "flag(x87-long-double) && (arch(i386) || arch(x86_64))"
#   dependencies: long-double
#   cpp-options:
#   - -DUSE_X87_LONG_DOUBLE

# flag(float128): Support Float128
- condition: flag(float128)
  dependencies: float128 >=0.1 && <0.2
  cpp-options:
  - -DUSE_FLOAT128

# flag(half): Support Half
# Note that half-0.3's isInfinite is buggy (https://github.com/ekmett/half/issues/23)
- condition: flag(half)
  dependencies: half >=0.3 && <0.4
  cpp-options:
  - -DUSE_HALF

- condition: "!flag(pure-hs) && flag(half) && arch(x86_64) && flag(f16c)"
  cpp-options:
  - -DHAS_FAST_HALF_CONVERSION
  cc-options:
  - -mf16c
  c-sources:
  - cbits/half.c

- condition: "!flag(pure-hs) && flag(half) && arch(aarch64)"
  cpp-options:
  - -DHAS_FAST_HALF_CONVERSION
  c-sources:
  - cbits/half.c

- condition: "!flag(pure-hs) && (arch(aarch64) || arch(x86_64))"
  cpp-options:
  - -DHAS_FAST_CANONICALIZE
  c-sources:
  - cbits/canonicalize.c

library:
  source-dirs: src
  exposed-modules:
  - Numeric.Floating.IEEE
  - Numeric.Floating.IEEE.Internal
  - Numeric.Floating.IEEE.NaN
  other-modules:
  - GHC.Float.Compat
  - MyPrelude
  - Numeric.Floating.IEEE.Internal.Augmented
  - Numeric.Floating.IEEE.Internal.Base
  - Numeric.Floating.IEEE.Internal.Classify
  - Numeric.Floating.IEEE.Internal.Conversion
  - Numeric.Floating.IEEE.Internal.FMA
  - Numeric.Floating.IEEE.Internal.GenericArith
  - Numeric.Floating.IEEE.Internal.IntegerInternals
  - Numeric.Floating.IEEE.Internal.MinMax
  - Numeric.Floating.IEEE.Internal.NaN
  - Numeric.Floating.IEEE.Internal.NextFloat
  - Numeric.Floating.IEEE.Internal.Remainder
  - Numeric.Floating.IEEE.Internal.RoundToIntegral
  - Numeric.Floating.IEEE.Internal.Rounding
  - Numeric.Floating.IEEE.Internal.Rounding.Common
  - Numeric.Floating.IEEE.Internal.Rounding.Encode
  - Numeric.Floating.IEEE.Internal.Rounding.Integral
  - Numeric.Floating.IEEE.Internal.Rounding.Rational
  dependencies:
  - integer-logarithms >=1 && <1.1
  ghc-options:
  - -Wall
  when:
  - condition: flag(half)
    other-modules:
    - Numeric.Floating.IEEE.Internal.Half
  - condition: flag(float128)
    other-modules:
    - Numeric.Floating.IEEE.Internal.Float128
  - condition: "flag(integer-gmp) && impl(ghc < 9.0.0)"
    dependencies:
    # integer-gmp-1.1 is based on ghc-bignum, which is not what we want
    - integer-gmp >=1.0 && <1.1
  - condition: "flag(ghc-bignum) && impl(ghc >= 9.0.0)"
    dependencies:
    - ghc-bignum >=1.0 && <1.1

tests:
  fp-ieee-test:
    main:                Spec.hs
    source-dirs:         test
    other-modules:
    - AugmentedArithSpec
    - ClassificationSpec
    - FMASpec
    - IntegerInternalsSpec
    - MinMaxSpec
    - NaNSpec
    - NextFloatSpec
    - RoundingSpec
    - RoundToIntegralSpec
    - TwoSumSpec
    - Util
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -fno-ignore-asserts
    dependencies:
    - fp-ieee
    - QuickCheck
    - hspec
    - hspec-core
    - random
    - integer-logarithms
    when:
    - condition: flag(half)
      other-modules:
      - HalfSpec
    - condition: flag(float128)
      other-modules:
      - Float128Spec

  fp-ieee-decimal-test:
    main:                Spec.hs
    source-dirs:         decimal-test
    other-modules:
    - NextFloatSpec
    - Util
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -fno-ignore-asserts
    dependencies:
    - fp-ieee
    - QuickCheck
    - hspec
    - hspec-core
    - random
    - decimal-arithmetic

  fp-ieee-doctests:
    main: doctests.hs
    dependencies:
    - doctest >= 0.8

benchmarks:
  fp-ieee-benchmark:
    main: Benchmark.hs
    source-dirs: benchmark
    dependencies:
    - fp-ieee
    - gauge

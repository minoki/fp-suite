name:                rounded-hw
version:             0.2.0
github:              "minoki/haskell-floating-point/rounded-hw"
license:             BSD3
author:              "ARATA Mizuki"
maintainer:          "minorinoki@gmail.com"
copyright:           "2020 ARATA Mizuki"
category:            Numeric, Math
synopsis:            Directed rounding for built-in floating types

extra-source-files:
- README.md
- ChangeLog.md
- cbits/rounded-common.inl
- cbits/rounded-avx512.inl
- cbits/interval-prim-x86_64-sse2.S

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/minoki/haskell-floating-point/tree/master/rounded-hw#readme>

tested-with: GHC == 8.6.5, GHC == 8.8.4, GHC == 8.10.2

dependencies:
- base >= 4.12 && < 5
- deepseq
- vector
- primitive
- array
- fp-ieee ==0.1.*
# - rounded

flags:
  pure-hs:
    description: Disable FFI
    manual: true
    default: false

  c99:
    description: "Restrict use of platform-dependent features (e.g. SSE2) and only use C99 features"
    manual: true
    default: false

  avx512:
    description: "Use AVX512 EVEX encoding"
    manual: true
    default: false

  ghc-prim:
    description: "Use GHC's \"foreign import prim\" on the supported platform"
    manual: true
    default: true

  x87-long-double:
    description: "Support x87 \"long double\""
    manual: true
    default: true

  float128:
    description: "Support Float128"
    manual: true
    default: false

# Custom setup is required to allow assembly sources to #include "ghcconfig.h"
build-type: Custom
custom-setup:
  dependencies:
  - base >= 4.7
  - Cabal >= 1.24

library:
  source-dirs: src
  exposed-modules:
  - Numeric.Rounded.Hardware
  - Numeric.Rounded.Hardware.Backend
  - Numeric.Rounded.Hardware.Backend.ViaRational
  - Numeric.Rounded.Hardware.Class
  - Numeric.Rounded.Hardware.Internal
  - Numeric.Rounded.Hardware.Interval
  - Numeric.Rounded.Hardware.Interval.Class
  - Numeric.Rounded.Hardware.Interval.NonEmpty
  - Numeric.Rounded.Hardware.Rounding
  - Numeric.Rounded.Hardware.Vector.Storable
  - Numeric.Rounded.Hardware.Vector.Unboxed
  other-modules:
  - Numeric.Rounded.Hardware.Internal.Rounding
  - Numeric.Rounded.Hardware.Internal.Class
  - Numeric.Rounded.Hardware.Internal.Constants
  - Numeric.Rounded.Hardware.Internal.Conversion
  - Numeric.Rounded.Hardware.Internal.FloatUtil
  - Numeric.Rounded.Hardware.Internal.Show
  - Numeric.Rounded.Hardware.Backend.Default
  - Numeric.Rounded.Hardware.Interval.ElementaryFunctions
  dependencies:
  - tagged
  when:
  # Use FFI when flag(pure-hs) is off
  - condition: "!flag(pure-hs)"
    c-sources:
    - cbits/rounded.c
    cpp-options:
    - -DUSE_FFI
    exposed-modules:
    - Numeric.Rounded.Hardware.Backend.C
    other-modules:
    - FFIWrapper.Float
    - FFIWrapper.Double

  # flag(c99): Disable platform-dependent techniques and only use C99 fesetround
  - condition: flag(c99)
    cc-options:
    - -DUSE_C99

  # flag(avx512): Use AVX512 EVEX encoding
  - condition: flag(avx512)
    cc-options:
    - -DUSE_AVX512
    - -mavx512f

  # flag(ghc-prim): We support "foreign import prim" on GHC/x86_64
  - condition: "!flag(pure-hs) && !flag(c99) && flag(ghc-prim) && impl(ghc) && arch(x86_64)"
    exposed-modules:
    - Numeric.Rounded.Hardware.Backend.FastFFI
    cpp-options:
    - -DUSE_GHC_PRIM
    when:
    - condition: flag(avx512)
      then:
        c-sources:
        - cbits/interval-prim-x86_64-avx512.S
      else:
        c-sources:
        - cbits/interval-prim-x86_64.S

  # flag(x87-long-double): Support LongDouble on x86
  - condition: flag(x87-long-double) && (arch(i386) || arch(x86_64))
    dependencies: long-double
    c-sources:
    - cbits/rounded-x87longdouble.c
    other-modules:
    - Numeric.Rounded.Hardware.Backend.X87LongDouble
    cpp-options:
    - -DUSE_X87_LONG_DOUBLE

  # flag(float128): Support Float128
  - condition: flag(float128)
    dependencies: float128
    c-sources:
    - cbits/rounded-float128.c
    other-modules:
    - Numeric.Rounded.Hardware.Backend.Float128
    cpp-options:
    - -DUSE_FLOAT128

tests:
  rounded-hw-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - rounded-hw
    - hspec
    - QuickCheck
    - random
    when:
    - condition: flag(x87-long-double) && (arch(i386) || (arch(x86_64) && !os(windows)))
      dependencies: long-double
      other-modules:
      - X87LongDoubleSpec
      cpp-options:
      - -DTEST_X87_LONG_DOUBLE
      # Support for 80-bit long double is not good on Win64, so don't test

    - condition: flag(float128)
      dependencies: float128
      other-modules:
      - Float128Spec
      cpp-options:
      - -DTEST_FLOAT128

  rounded-hw-doctests:
    main: doctests.hs
    dependencies:
    - doctest >= 0.8

benchmarks:
  rounded-hw-benchmark:
    main: Benchmark.hs
    source-dirs: benchmark
    dependencies:
    - rounded-hw
    - gauge
    - array
    - vector
